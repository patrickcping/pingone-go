/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApi service
type ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService service

type ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService
	envID string
	mappingID string
	accept *string
}

func (r ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest) Accept(accept string) ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest {
	r.accept = &accept
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationMappingMappingIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationMappingMappingIDDelete DELETE Mapping

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param mappingID
 @return ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationMappingMappingIDDelete(ctx context.Context, envID string, mappingID string) ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		mappingID: mappingID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationMappingMappingIDDeleteExecute(r ApiV1EnvironmentsEnvIDPropagationMappingMappingIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService.V1EnvironmentsEnvIDPropagationMappingMappingIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/mapping/{mappingID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mappingID"+"}", url.PathEscape(parameterToString(r.mappingID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService
	envID string
	mappingID string
	accept *string
}

func (r ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest) Accept(accept string) ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest {
	r.accept = &accept
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationMappingsMappingIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationMappingsMappingIDGet READ One Mapping

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param mappingID
 @return ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationMappingsMappingIDGet(ctx context.Context, envID string, mappingID string) ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest {
	return ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		mappingID: mappingID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationMappingsMappingIDGetExecute(r ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService.V1EnvironmentsEnvIDPropagationMappingsMappingIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/mappings/{mappingID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mappingID"+"}", url.PathEscape(parameterToString(r.mappingID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService
	envID string
	mappingID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationMappingsMappingIDPutExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationMappingsMappingIDPut UPDATE Mapping

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param mappingID
 @return ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationMappingsMappingIDPut(ctx context.Context, envID string, mappingID string) ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest {
	return ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		mappingID: mappingID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationMappingsMappingIDPutExecute(r ApiV1EnvironmentsEnvIDPropagationMappingsMappingIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService.V1EnvironmentsEnvIDPropagationMappingsMappingIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/mappings/{mappingID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mappingID"+"}", url.PathEscape(parameterToString(r.mappingID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService
	envID string
	ruleID string
	accept *string
	contentType *string
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest) Accept(accept string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest {
	r.accept = &accept
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest {
	r.contentType = &contentType
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet READ One Rule  Mapping

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param ruleID
 @return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet(ctx context.Context, envID string, ruleID string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest {
	return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		ruleID: ruleID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetExecute(r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/rules/{ruleID}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ruleID"+"}", url.PathEscape(parameterToString(r.ruleID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService
	envID string
	ruleID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost CREATE Rule Mapping

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param ruleID
 @return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost(ctx context.Context, envID string, ruleID string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest {
	return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		ruleID: ruleID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostExecute(r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationMappingsApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDMappingsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/rules/{ruleID}/mappings"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ruleID"+"}", url.PathEscape(parameterToString(r.ruleID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
 * PingOne Platform API
 *
 * A bare-bones collection for the PingOne API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ManagementAPIsGatewayManagementGatewayInstancesApiService ManagementAPIsGatewayManagementGatewayInstancesApi service
type ManagementAPIsGatewayManagementGatewayInstancesApiService service

type ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsGatewayManagementGatewayInstancesApiService
	envID string
	gatewayID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetExecute(r)
}

/*
 * V1EnvironmentsEnvIDGatewaysGatewayIDInstancesGet READ All Gateway Instances
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param gatewayID
 * @return ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest
 */
func (a *ManagementAPIsGatewayManagementGatewayInstancesApiService) V1EnvironmentsEnvIDGatewaysGatewayIDInstancesGet(ctx _context.Context, envID string, gatewayID string) ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest {
	return ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		gatewayID: gatewayID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsGatewayManagementGatewayInstancesApiService) V1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetExecute(r ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsGatewayManagementGatewayInstancesApiService.V1EnvironmentsEnvIDGatewaysGatewayIDInstancesGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/gateways/{gatewayID}/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"gatewayID"+"}", _neturl.PathEscape(parameterToString(r.gatewayID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsGatewayManagementGatewayInstancesApiService
	envID string
	gatewayID string
	instanceID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetExecute(r)
}

/*
 * V1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGet READ One Gateway Instance
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param gatewayID
 * @param instanceID
 * @return ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest
 */
func (a *ManagementAPIsGatewayManagementGatewayInstancesApiService) V1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGet(ctx _context.Context, envID string, gatewayID string, instanceID string) ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest {
	return ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		gatewayID: gatewayID,
		instanceID: instanceID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsGatewayManagementGatewayInstancesApiService) V1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetExecute(r ApiV1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsGatewayManagementGatewayInstancesApiService.V1EnvironmentsEnvIDGatewaysGatewayIDInstancesInstanceIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/gateways/{gatewayID}/instances/{instanceID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"gatewayID"+"}", _neturl.PathEscape(parameterToString(r.gatewayID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceID"+"}", _neturl.PathEscape(parameterToString(r.instanceID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

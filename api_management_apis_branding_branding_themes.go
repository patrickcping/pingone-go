/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ManagementAPIsBrandingBrandingThemesApiService ManagementAPIsBrandingBrandingThemesApi service
type ManagementAPIsBrandingBrandingThemesApiService service

type ApiV1EnvironmentsEnvIDThemesGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsBrandingBrandingThemesApiService
	envID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDThemesGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDThemesGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDThemesGetExecute(r)
}

/*
V1EnvironmentsEnvIDThemesGet READ Branding Themes

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDThemesGetRequest
*/
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesGet(ctx context.Context, envID string) ApiV1EnvironmentsEnvIDThemesGetRequest {
	return ApiV1EnvironmentsEnvIDThemesGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesGetExecute(r ApiV1EnvironmentsEnvIDThemesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsBrandingBrandingThemesApiService.V1EnvironmentsEnvIDThemesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/themes"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDThemesPostRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsBrandingBrandingThemesApiService
	envID string
	authorization *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDThemesPostRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDThemesPostRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesPostRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDThemesPostRequest {
	r.contentType = &contentType
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDThemesPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDThemesPostExecute(r)
}

/*
V1EnvironmentsEnvIDThemesPost CREATE Branding Theme

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDThemesPostRequest
*/
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesPost(ctx context.Context, envID string) ApiV1EnvironmentsEnvIDThemesPostRequest {
	return ApiV1EnvironmentsEnvIDThemesPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesPostExecute(r ApiV1EnvironmentsEnvIDThemesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsBrandingBrandingThemesApiService.V1EnvironmentsEnvIDThemesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/themes"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsBrandingBrandingThemesApiService
	envID string
	themeID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDThemesThemeIDDefaultGetExecute(r)
}

/*
V1EnvironmentsEnvIDThemesThemeIDDefaultGet READ Branding Theme Default

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param themeID
 @return ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest
*/
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDDefaultGet(ctx context.Context, envID string, themeID string) ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest {
	return ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		themeID: themeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDDefaultGetExecute(r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsBrandingBrandingThemesApiService.V1EnvironmentsEnvIDThemesThemeIDDefaultGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/themes/{themeID}/default"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"themeID"+"}", url.PathEscape(parameterToString(r.themeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsBrandingBrandingThemesApiService
	envID string
	themeID string
	authorization *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest {
	r.contentType = &contentType
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDThemesThemeIDDefaultPutExecute(r)
}

/*
V1EnvironmentsEnvIDThemesThemeIDDefaultPut UPDATE Branding Theme Default

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param themeID
 @return ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest
*/
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDDefaultPut(ctx context.Context, envID string, themeID string) ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest {
	return ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		themeID: themeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDDefaultPutExecute(r ApiV1EnvironmentsEnvIDThemesThemeIDDefaultPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsBrandingBrandingThemesApiService.V1EnvironmentsEnvIDThemesThemeIDDefaultPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/themes/{themeID}/default"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"themeID"+"}", url.PathEscape(parameterToString(r.themeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsBrandingBrandingThemesApiService
	envID string
	themeID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDThemesThemeIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDThemesThemeIDDelete DELETE Branding Theme

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param themeID
 @return ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest
*/
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDDelete(ctx context.Context, envID string, themeID string) ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		themeID: themeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDDeleteExecute(r ApiV1EnvironmentsEnvIDThemesThemeIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsBrandingBrandingThemesApiService.V1EnvironmentsEnvIDThemesThemeIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/themes/{themeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"themeID"+"}", url.PathEscape(parameterToString(r.themeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsBrandingBrandingThemesApiService
	envID string
	themeID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDThemesThemeIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDThemesThemeIDGet READ One Branding Theme

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param themeID
 @return ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest
*/
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDGet(ctx context.Context, envID string, themeID string) ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest {
	return ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		themeID: themeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDGetExecute(r ApiV1EnvironmentsEnvIDThemesThemeIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsBrandingBrandingThemesApiService.V1EnvironmentsEnvIDThemesThemeIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/themes/{themeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"themeID"+"}", url.PathEscape(parameterToString(r.themeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsBrandingBrandingThemesApiService
	envID string
	themeID string
	authorization *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest {
	r.contentType = &contentType
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDThemesThemeIDPutExecute(r)
}

/*
V1EnvironmentsEnvIDThemesThemeIDPut UPDATE Branding Theme

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param themeID
 @return ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest
*/
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDPut(ctx context.Context, envID string, themeID string) ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest {
	return ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		themeID: themeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsBrandingBrandingThemesApiService) V1EnvironmentsEnvIDThemesThemeIDPutExecute(r ApiV1EnvironmentsEnvIDThemesThemeIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsBrandingBrandingThemesApiService.V1EnvironmentsEnvIDThemesThemeIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/themes/{themeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"themeID"+"}", url.PathEscape(parameterToString(r.themeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
)

// BillOfMaterialsBookmarks struct for BillOfMaterialsBookmarks
type BillOfMaterialsBookmarks struct {
	// Name of the custom bookmark. The name must be unique among the product bookmarks and be 50 characters or fewer.
	Name *string `json:"name,omitempty"`
	// A valid URL for the bookmark.
	Href *string `json:"href,omitempty"`
}

// NewBillOfMaterialsBookmarks instantiates a new BillOfMaterialsBookmarks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillOfMaterialsBookmarks() *BillOfMaterialsBookmarks {
	this := BillOfMaterialsBookmarks{}
	return &this
}

// NewBillOfMaterialsBookmarksWithDefaults instantiates a new BillOfMaterialsBookmarks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillOfMaterialsBookmarksWithDefaults() *BillOfMaterialsBookmarks {
	this := BillOfMaterialsBookmarks{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BillOfMaterialsBookmarks) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillOfMaterialsBookmarks) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BillOfMaterialsBookmarks) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BillOfMaterialsBookmarks) SetName(v string) {
	o.Name = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *BillOfMaterialsBookmarks) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillOfMaterialsBookmarks) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *BillOfMaterialsBookmarks) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *BillOfMaterialsBookmarks) SetHref(v string) {
	o.Href = &v
}

func (o BillOfMaterialsBookmarks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	return json.Marshal(toSerialize)
}

type NullableBillOfMaterialsBookmarks struct {
	value *BillOfMaterialsBookmarks
	isSet bool
}

func (v NullableBillOfMaterialsBookmarks) Get() *BillOfMaterialsBookmarks {
	return v.value
}

func (v *NullableBillOfMaterialsBookmarks) Set(val *BillOfMaterialsBookmarks) {
	v.value = val
	v.isSet = true
}

func (v NullableBillOfMaterialsBookmarks) IsSet() bool {
	return v.isSet
}

func (v *NullableBillOfMaterialsBookmarks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillOfMaterialsBookmarks(val *BillOfMaterialsBookmarks) *NullableBillOfMaterialsBookmarks {
	return &NullableBillOfMaterialsBookmarks{value: val, isSet: true}
}

func (v NullableBillOfMaterialsBookmarks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillOfMaterialsBookmarks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
)

// ApplicationAccessControlRole struct for ApplicationAccessControlRole
type ApplicationAccessControlRole struct {
	// A string that specifies the user role required to access the application. Options are ADMIN_USERS_ONLY. A user is an admin user if the user has one or more of the following roles Organization Admin, Environment Admin, Identity Data Admin, or Client Application Developer.
	Type *string `json:"type,omitempty"`
}

// NewApplicationAccessControlRole instantiates a new ApplicationAccessControlRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationAccessControlRole() *ApplicationAccessControlRole {
	this := ApplicationAccessControlRole{}
	return &this
}

// NewApplicationAccessControlRoleWithDefaults instantiates a new ApplicationAccessControlRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationAccessControlRoleWithDefaults() *ApplicationAccessControlRole {
	this := ApplicationAccessControlRole{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApplicationAccessControlRole) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAccessControlRole) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApplicationAccessControlRole) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ApplicationAccessControlRole) SetType(v string) {
	o.Type = &v
}

func (o ApplicationAccessControlRole) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationAccessControlRole struct {
	value *ApplicationAccessControlRole
	isSet bool
}

func (v NullableApplicationAccessControlRole) Get() *ApplicationAccessControlRole {
	return v.value
}

func (v *NullableApplicationAccessControlRole) Set(val *ApplicationAccessControlRole) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationAccessControlRole) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationAccessControlRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationAccessControlRole(val *ApplicationAccessControlRole) *NullableApplicationAccessControlRole {
	return &NullableApplicationAccessControlRole{value: val, isSet: true}
}

func (v NullableApplicationAccessControlRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationAccessControlRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



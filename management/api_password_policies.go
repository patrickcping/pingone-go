/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// PasswordPoliciesApiService PasswordPoliciesApi service
type PasswordPoliciesApiService service

type ApiV1EnvironmentsEnvironmentIDPasswordPoliciesGetRequest struct {
	ctx context.Context
	ApiService *PasswordPoliciesApiService
	environmentID string
}

func (r ApiV1EnvironmentsEnvironmentIDPasswordPoliciesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDPasswordPoliciesGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDPasswordPoliciesGet READ All Password Policies

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @return ApiV1EnvironmentsEnvironmentIDPasswordPoliciesGetRequest
*/
func (a *PasswordPoliciesApiService) V1EnvironmentsEnvironmentIDPasswordPoliciesGet(ctx context.Context, environmentID string) ApiV1EnvironmentsEnvironmentIDPasswordPoliciesGetRequest {
	return ApiV1EnvironmentsEnvironmentIDPasswordPoliciesGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
	}
}

// Execute executes the request
func (a *PasswordPoliciesApiService) V1EnvironmentsEnvironmentIDPasswordPoliciesGetExecute(r ApiV1EnvironmentsEnvironmentIDPasswordPoliciesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PasswordPoliciesApiService.V1EnvironmentsEnvironmentIDPasswordPoliciesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/passwordPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetRequest struct {
	ctx context.Context
	ApiService *PasswordPoliciesApiService
	environmentID string
	passwordPolicyID string
}

func (r ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGet READ One Password Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param passwordPolicyID
 @return ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetRequest
*/
func (a *PasswordPoliciesApiService) V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGet(ctx context.Context, environmentID string, passwordPolicyID string) ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetRequest {
	return ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		passwordPolicyID: passwordPolicyID,
	}
}

// Execute executes the request
func (a *PasswordPoliciesApiService) V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetExecute(r ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PasswordPoliciesApiService.V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/passwordPolicies/{passwordPolicyID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"passwordPolicyID"+"}", url.PathEscape(parameterToString(r.passwordPolicyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest struct {
	ctx context.Context
	ApiService *PasswordPoliciesApiService
	environmentID string
	passwordPolicyID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutExecute(r)
}

/*
V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPut UPDATE Password Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param passwordPolicyID
 @return ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest
*/
func (a *PasswordPoliciesApiService) V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPut(ctx context.Context, environmentID string, passwordPolicyID string) ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest {
	return ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		passwordPolicyID: passwordPolicyID,
	}
}

// Execute executes the request
func (a *PasswordPoliciesApiService) V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutExecute(r ApiV1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PasswordPoliciesApiService.V1EnvironmentsEnvironmentIDPasswordPoliciesPasswordPolicyIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/passwordPolicies/{passwordPolicyID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"passwordPolicyID"+"}", url.PathEscape(parameterToString(r.passwordPolicyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ManagementAPIsNotificationsNotificationsTemplatesApiService ManagementAPIsNotificationsNotificationsTemplatesApi service
type ManagementAPIsNotificationsNotificationsTemplatesApiService service

type ApiV1EnvironmentsEnvIDTemplatesGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
}

func (r ApiV1EnvironmentsEnvIDTemplatesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesGetExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesGet READ All Templates

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDTemplatesGetRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesGet(ctx context.Context, envID string) ApiV1EnvironmentsEnvIDTemplatesGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesGetExecute(r ApiV1EnvironmentsEnvIDTemplatesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	contentID string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete DELETE Content

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @param contentID
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete(ctx context.Context, envID string, templateName string, contentID string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
		contentID: contentID,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentID"+"}", url.PathEscape(parameterToString(r.contentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	contentID string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet READ One Content

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @param contentID
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet(ctx context.Context, envID string, templateName string, contentID string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
		contentID: contentID,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentID"+"}", url.PathEscape(parameterToString(r.contentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	contentID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut UPDATE Push Content

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @param contentID
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut(ctx context.Context, envID string, templateName string, contentID string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
		contentID: contentID,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentID"+"}", url.PathEscape(parameterToString(r.contentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	filter *string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest) Filter(filter string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest {
	r.filter = &filter
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete DELETE Bulk Variant Contents

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete(ctx context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsGetExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameContentsGet READ All Contents

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsGet(ctx context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsGetExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	filter *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) Filter(filter string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest {
	r.filter = &filter
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch PATCH Bulk Variant Contents

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch(ctx context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPostExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameContentsPost CREATE Push Content

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPost(ctx context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPostExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameGetExecute(r)
}

/*
V1EnvironmentsEnvIDTemplatesTemplateNameGet READ One Template

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param templateName
 @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest
*/
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameGet(ctx context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

// Execute executes the request
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameGetExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", url.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

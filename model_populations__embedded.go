/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
)

// PopulationsEmbedded struct for PopulationsEmbedded
type PopulationsEmbedded struct {
	Populations *[]Population `json:"populations,omitempty"`
}

// NewPopulationsEmbedded instantiates a new PopulationsEmbedded object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopulationsEmbedded() *PopulationsEmbedded {
	this := PopulationsEmbedded{}
	return &this
}

// NewPopulationsEmbeddedWithDefaults instantiates a new PopulationsEmbedded object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopulationsEmbeddedWithDefaults() *PopulationsEmbedded {
	this := PopulationsEmbedded{}
	return &this
}

// GetPopulations returns the Populations field value if set, zero value otherwise.
func (o *PopulationsEmbedded) GetPopulations() []Population {
	if o == nil || o.Populations == nil {
		var ret []Population
		return ret
	}
	return *o.Populations
}

// GetPopulationsOk returns a tuple with the Populations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopulationsEmbedded) GetPopulationsOk() (*[]Population, bool) {
	if o == nil || o.Populations == nil {
		return nil, false
	}
	return o.Populations, true
}

// HasPopulations returns a boolean if a field has been set.
func (o *PopulationsEmbedded) HasPopulations() bool {
	if o != nil && o.Populations != nil {
		return true
	}

	return false
}

// SetPopulations gets a reference to the given []Population and assigns it to the Populations field.
func (o *PopulationsEmbedded) SetPopulations(v []Population) {
	o.Populations = &v
}

func (o PopulationsEmbedded) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Populations != nil {
		toSerialize["populations"] = o.Populations
	}
	return json.Marshal(toSerialize)
}

type NullablePopulationsEmbedded struct {
	value *PopulationsEmbedded
	isSet bool
}

func (v NullablePopulationsEmbedded) Get() *PopulationsEmbedded {
	return v.value
}

func (v *NullablePopulationsEmbedded) Set(val *PopulationsEmbedded) {
	v.value = val
	v.isSet = true
}

func (v NullablePopulationsEmbedded) IsSet() bool {
	return v.isSet
}

func (v *NullablePopulationsEmbedded) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopulationsEmbedded(val *PopulationsEmbedded) *NullablePopulationsEmbedded {
	return &NullablePopulationsEmbedded{value: val, isSet: true}
}

func (v NullablePopulationsEmbedded) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopulationsEmbedded) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



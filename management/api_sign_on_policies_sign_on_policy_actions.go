/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SignOnPoliciesSignOnPolicyActionsApiService SignOnPoliciesSignOnPolicyActionsApi service
type SignOnPoliciesSignOnPolicyActionsApiService service

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPolicyActionsApiService
	environmentID string
	policyID string
	actionID string
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDelete DELETE Sign-On Policy Action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @param actionID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest
*/
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDelete(ctx context.Context, environmentID string, policyID string, actionID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
		actionID: actionID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}/actions/{actionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actionID"+"}", url.PathEscape(parameterToString(r.actionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPolicyActionsApiService
	environmentID string
	policyID string
	actionID string
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGet READ One Sign-On Policy Action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @param actionID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetRequest
*/
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGet(ctx context.Context, environmentID string, policyID string, actionID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
		actionID: actionID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}/actions/{actionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actionID"+"}", url.PathEscape(parameterToString(r.actionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPolicyActionsApiService
	environmentID string
	policyID string
	actionID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPut UPDATE Sign-On Policy Action

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @param actionID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest
*/
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPut(ctx context.Context, environmentID string, policyID string, actionID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
		actionID: actionID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsActionIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}/actions/{actionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actionID"+"}", url.PathEscape(parameterToString(r.actionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPolicyActionsApiService
	environmentID string
	policyID string
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGet READ All Sign-On Policy Actions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetRequest
*/
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGet(ctx context.Context, environmentID string, policyID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPolicyActionsApiService
	environmentID string
	policyID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPost CREATE Sign-On Policy Action (AGREEMENT)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest
*/
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPost(ctx context.Context, environmentID string, policyID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDActionsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

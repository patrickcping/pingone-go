/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
)

// RiskPolicySetCondition The condition logic that determines when a policy is evaluated to true and when it is evaluated to false.
type RiskPolicySetCondition struct {
	Value *string `json:"value,omitempty"`
	Equals *OneOfstringboolean `json:"equals,omitempty"`
	AggregatedWeights *[]RiskPolicySetConditionAggregatedWeights `json:"aggregatedWeights,omitempty"`
	Between *RiskPolicySetConditionBetween `json:"between,omitempty"`
}

// NewRiskPolicySetCondition instantiates a new RiskPolicySetCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPolicySetCondition() *RiskPolicySetCondition {
	this := RiskPolicySetCondition{}
	return &this
}

// NewRiskPolicySetConditionWithDefaults instantiates a new RiskPolicySetCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPolicySetConditionWithDefaults() *RiskPolicySetCondition {
	this := RiskPolicySetCondition{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RiskPolicySetCondition) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPolicySetCondition) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RiskPolicySetCondition) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RiskPolicySetCondition) SetValue(v string) {
	o.Value = &v
}

// GetEquals returns the Equals field value if set, zero value otherwise.
func (o *RiskPolicySetCondition) GetEquals() OneOfstringboolean {
	if o == nil || o.Equals == nil {
		var ret OneOfstringboolean
		return ret
	}
	return *o.Equals
}

// GetEqualsOk returns a tuple with the Equals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPolicySetCondition) GetEqualsOk() (*OneOfstringboolean, bool) {
	if o == nil || o.Equals == nil {
		return nil, false
	}
	return o.Equals, true
}

// HasEquals returns a boolean if a field has been set.
func (o *RiskPolicySetCondition) HasEquals() bool {
	if o != nil && o.Equals != nil {
		return true
	}

	return false
}

// SetEquals gets a reference to the given OneOfstringboolean and assigns it to the Equals field.
func (o *RiskPolicySetCondition) SetEquals(v OneOfstringboolean) {
	o.Equals = &v
}

// GetAggregatedWeights returns the AggregatedWeights field value if set, zero value otherwise.
func (o *RiskPolicySetCondition) GetAggregatedWeights() []RiskPolicySetConditionAggregatedWeights {
	if o == nil || o.AggregatedWeights == nil {
		var ret []RiskPolicySetConditionAggregatedWeights
		return ret
	}
	return *o.AggregatedWeights
}

// GetAggregatedWeightsOk returns a tuple with the AggregatedWeights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPolicySetCondition) GetAggregatedWeightsOk() (*[]RiskPolicySetConditionAggregatedWeights, bool) {
	if o == nil || o.AggregatedWeights == nil {
		return nil, false
	}
	return o.AggregatedWeights, true
}

// HasAggregatedWeights returns a boolean if a field has been set.
func (o *RiskPolicySetCondition) HasAggregatedWeights() bool {
	if o != nil && o.AggregatedWeights != nil {
		return true
	}

	return false
}

// SetAggregatedWeights gets a reference to the given []RiskPolicySetConditionAggregatedWeights and assigns it to the AggregatedWeights field.
func (o *RiskPolicySetCondition) SetAggregatedWeights(v []RiskPolicySetConditionAggregatedWeights) {
	o.AggregatedWeights = &v
}

// GetBetween returns the Between field value if set, zero value otherwise.
func (o *RiskPolicySetCondition) GetBetween() RiskPolicySetConditionBetween {
	if o == nil || o.Between == nil {
		var ret RiskPolicySetConditionBetween
		return ret
	}
	return *o.Between
}

// GetBetweenOk returns a tuple with the Between field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPolicySetCondition) GetBetweenOk() (*RiskPolicySetConditionBetween, bool) {
	if o == nil || o.Between == nil {
		return nil, false
	}
	return o.Between, true
}

// HasBetween returns a boolean if a field has been set.
func (o *RiskPolicySetCondition) HasBetween() bool {
	if o != nil && o.Between != nil {
		return true
	}

	return false
}

// SetBetween gets a reference to the given RiskPolicySetConditionBetween and assigns it to the Between field.
func (o *RiskPolicySetCondition) SetBetween(v RiskPolicySetConditionBetween) {
	o.Between = &v
}

func (o RiskPolicySetCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Equals != nil {
		toSerialize["equals"] = o.Equals
	}
	if o.AggregatedWeights != nil {
		toSerialize["aggregatedWeights"] = o.AggregatedWeights
	}
	if o.Between != nil {
		toSerialize["between"] = o.Between
	}
	return json.Marshal(toSerialize)
}

type NullableRiskPolicySetCondition struct {
	value *RiskPolicySetCondition
	isSet bool
}

func (v NullableRiskPolicySetCondition) Get() *RiskPolicySetCondition {
	return v.value
}

func (v *NullableRiskPolicySetCondition) Set(val *RiskPolicySetCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPolicySetCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPolicySetCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPolicySetCondition(val *RiskPolicySetCondition) *NullableRiskPolicySetCondition {
	return &NullableRiskPolicySetCondition{value: val, isSet: true}
}

func (v NullableRiskPolicySetCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPolicySetCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



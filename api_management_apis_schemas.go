/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ManagementAPIsSchemasApiService ManagementAPIsSchemasApi service
type ManagementAPIsSchemasApiService service

type ApiV1EnvironmentsEnvIDSchemasGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
}


func (r ApiV1EnvironmentsEnvIDSchemasGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasGetExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasGet READ All Schemas

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDSchemasGetRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasGet(ctx _context.Context, envID string) ApiV1EnvironmentsEnvIDSchemasGetRequest {
	return ApiV1EnvironmentsEnvIDSchemasGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasGetExecute(r ApiV1EnvironmentsEnvIDSchemasGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
	schemaID string
	attributeID string
	contentType *string
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest {
	r.contentType = &contentType
	return r
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDelete DELETE Attribute

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param schemaID
 @param attributeID
 @return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDelete(ctx _context.Context, envID string, schemaID string, attributeID string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		schemaID: schemaID,
		attributeID: attributeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteExecute(r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schemaID"+"}", _neturl.PathEscape(parameterToString(r.schemaID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeID"+"}", _neturl.PathEscape(parameterToString(r.attributeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
	schemaID string
	attributeID string
}


func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGet READ One Attribute

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param schemaID
 @param attributeID
 @return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGet(ctx _context.Context, envID string, schemaID string, attributeID string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetRequest {
	return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		schemaID: schemaID,
		attributeID: attributeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetExecute(r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schemaID"+"}", _neturl.PathEscape(parameterToString(r.schemaID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeID"+"}", _neturl.PathEscape(parameterToString(r.attributeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
	schemaID string
	attributeID string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatch UPDATE Attribute (Patch)

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param schemaID
 @param attributeID
 @return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatch(ctx _context.Context, envID string, schemaID string, attributeID string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest {
	return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		schemaID: schemaID,
		attributeID: attributeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchExecute(r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatchRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPatch")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schemaID"+"}", _neturl.PathEscape(parameterToString(r.schemaID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeID"+"}", _neturl.PathEscape(parameterToString(r.attributeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
	schemaID string
	attributeID string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPut UPDATE Attribute (Put)

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param schemaID
 @param attributeID
 @return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPut(ctx _context.Context, envID string, schemaID string, attributeID string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest {
	return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		schemaID: schemaID,
		attributeID: attributeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutExecute(r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesAttributeIDPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas/{schemaID}/attributes/{attributeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schemaID"+"}", _neturl.PathEscape(parameterToString(r.schemaID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attributeID"+"}", _neturl.PathEscape(parameterToString(r.attributeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
	schemaID string
}


func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesGetExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasSchemaIDAttributesGet READ All (Schema) Attributes

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param schemaID
 @return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesGetRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesGet(ctx _context.Context, envID string, schemaID string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesGetRequest {
	return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		schemaID: schemaID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesGetExecute(r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas/{schemaID}/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schemaID"+"}", _neturl.PathEscape(parameterToString(r.schemaID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
	schemaID string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesPostExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasSchemaIDAttributesPost CREATE Attribute

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param schemaID
 @return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesPost(ctx _context.Context, envID string, schemaID string) ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest {
	return ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		schemaID: schemaID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDAttributesPostExecute(r ApiV1EnvironmentsEnvIDSchemasSchemaIDAttributesPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasSchemaIDAttributesPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas/{schemaID}/attributes"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schemaID"+"}", _neturl.PathEscape(parameterToString(r.schemaID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSchemasSchemaIDGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSchemasApiService
	envID string
	schemaID string
}


func (r ApiV1EnvironmentsEnvIDSchemasSchemaIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSchemasSchemaIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDSchemasSchemaIDGet READ One Schema

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param schemaID
 @return ApiV1EnvironmentsEnvIDSchemasSchemaIDGetRequest
*/
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDGet(ctx _context.Context, envID string, schemaID string) ApiV1EnvironmentsEnvIDSchemasSchemaIDGetRequest {
	return ApiV1EnvironmentsEnvIDSchemasSchemaIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		schemaID: schemaID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSchemasApiService) V1EnvironmentsEnvIDSchemasSchemaIDGetExecute(r ApiV1EnvironmentsEnvIDSchemasSchemaIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSchemasApiService.V1EnvironmentsEnvIDSchemasSchemaIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/schemas/{schemaID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schemaID"+"}", _neturl.PathEscape(parameterToString(r.schemaID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

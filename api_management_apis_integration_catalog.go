/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ManagementAPIsIntegrationCatalogApiService ManagementAPIsIntegrationCatalogApi service
type ManagementAPIsIntegrationCatalogApiService service

type ApiV1EnvironmentsEnvIDIntegrationsGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIntegrationCatalogApiService
	envID string
}

func (r ApiV1EnvironmentsEnvIDIntegrationsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIntegrationsGetExecute(r)
}

/*
V1EnvironmentsEnvIDIntegrationsGet READ Integration Metadata

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDIntegrationsGetRequest
*/
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsGet(ctx context.Context, envID string) ApiV1EnvironmentsEnvIDIntegrationsGetRequest {
	return ApiV1EnvironmentsEnvIDIntegrationsGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsGetExecute(r ApiV1EnvironmentsEnvIDIntegrationsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIntegrationCatalogApiService.V1EnvironmentsEnvIDIntegrationsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/integrations"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIntegrationCatalogApiService
	envID string
	integrationID string
}

func (r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDIntegrationsIntegrationIDGet READ One Integration Metadata

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param integrationID
 @return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDGetRequest
*/
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDGet(ctx context.Context, envID string, integrationID string) ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDGetRequest {
	return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		integrationID: integrationID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDGetExecute(r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIntegrationCatalogApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/integrations/{integrationID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationID"+"}", url.PathEscape(parameterToString(r.integrationID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIntegrationCatalogApiService
	envID string
	integrationID string
}

func (r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetExecute(r)
}

/*
V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet READ Integration Version Metadata

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param integrationID
 @return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetRequest
*/
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet(ctx context.Context, envID string, integrationID string) ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetRequest {
	return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		integrationID: integrationID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetExecute(r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIntegrationCatalogApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/integrations/{integrationID}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationID"+"}", url.PathEscape(parameterToString(r.integrationID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIntegrationCatalogApiService
	envID string
	integrationID string
	integrationVersionID string
}

func (r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetExecute(r)
}

/*
V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet READ Integration Version Asset Download

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param integrationID
 @param integrationVersionID
 @return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetRequest
*/
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet(ctx context.Context, envID string, integrationID string, integrationVersionID string) ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetRequest {
	return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		integrationID: integrationID,
		integrationVersionID: integrationVersionID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetExecute(r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIntegrationCatalogApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDAssetGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/integrations/{integrationID}/versions/{integrationVersionID}/asset"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationID"+"}", url.PathEscape(parameterToString(r.integrationID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationVersionID"+"}", url.PathEscape(parameterToString(r.integrationVersionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIntegrationCatalogApiService
	envID string
	integrationID string
	integrationVersionID string
}

func (r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet READ One Integration Version Metadata

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param integrationID
 @param integrationVersionID
 @return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetRequest
*/
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet(ctx context.Context, envID string, integrationID string, integrationVersionID string) ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetRequest {
	return ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		integrationID: integrationID,
		integrationVersionID: integrationVersionID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIntegrationCatalogApiService) V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetExecute(r ApiV1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIntegrationCatalogApiService.V1EnvironmentsEnvIDIntegrationsIntegrationIDVersionsIntegrationVersionIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/integrations/{integrationID}/versions/{integrationVersionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationID"+"}", url.PathEscape(parameterToString(r.integrationID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integrationVersionID"+"}", url.PathEscape(parameterToString(r.integrationVersionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

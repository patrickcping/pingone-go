/*
 * PingOne Platform API
 *
 * A bare-bones collection for the PingOne API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AuthenticationAPIsOpenIDConnectOAuth2ApiService AuthenticationAPIsOpenIDConnectOAuth2Api service
type AuthenticationAPIsOpenIDConnectOAuth2ApiService service

type ApiV1EnvIDAsAuthorizeGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
	responseType *string
	clientId *string
	responseMode *string
	scope *string
	state *string
	request *string
}

func (r ApiV1EnvIDAsAuthorizeGetRequest) ResponseType(responseType string) ApiV1EnvIDAsAuthorizeGetRequest {
	r.responseType = &responseType
	return r
}
func (r ApiV1EnvIDAsAuthorizeGetRequest) ClientId(clientId string) ApiV1EnvIDAsAuthorizeGetRequest {
	r.clientId = &clientId
	return r
}
func (r ApiV1EnvIDAsAuthorizeGetRequest) ResponseMode(responseMode string) ApiV1EnvIDAsAuthorizeGetRequest {
	r.responseMode = &responseMode
	return r
}
func (r ApiV1EnvIDAsAuthorizeGetRequest) Scope(scope string) ApiV1EnvIDAsAuthorizeGetRequest {
	r.scope = &scope
	return r
}
func (r ApiV1EnvIDAsAuthorizeGetRequest) State(state string) ApiV1EnvIDAsAuthorizeGetRequest {
	r.state = &state
	return r
}
func (r ApiV1EnvIDAsAuthorizeGetRequest) Request(request string) ApiV1EnvIDAsAuthorizeGetRequest {
	r.request = &request
	return r
}

func (r ApiV1EnvIDAsAuthorizeGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsAuthorizeGetExecute(r)
}

/*
 * V1EnvIDAsAuthorizeGet Authorize (Transaction Approval) 
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsAuthorizeGetRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsAuthorizeGet(ctx _context.Context, envID string) ApiV1EnvIDAsAuthorizeGetRequest {
	return ApiV1EnvIDAsAuthorizeGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsAuthorizeGetExecute(r ApiV1EnvIDAsAuthorizeGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsAuthorizeGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/authorize"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.responseType != nil {
		localVarQueryParams.Add("response_type", parameterToString(*r.responseType, ""))
	}
	if r.clientId != nil {
		localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	if r.responseMode != nil {
		localVarQueryParams.Add("response_mode", parameterToString(*r.responseMode, ""))
	}
	if r.scope != nil {
		localVarQueryParams.Add("scope", parameterToString(*r.scope, ""))
	}
	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.request != nil {
		localVarQueryParams.Add("request", parameterToString(*r.request, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsAuthorizePostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
	contentType *string
	responseType *string
	clientId *string
	redirectUri *string
	scope *string
	nonce *int32
	state *string
	prompt *string
	maxAge *int32
	acrValues *string
}

func (r ApiV1EnvIDAsAuthorizePostRequest) ContentType(contentType string) ApiV1EnvIDAsAuthorizePostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) ResponseType(responseType string) ApiV1EnvIDAsAuthorizePostRequest {
	r.responseType = &responseType
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) ClientId(clientId string) ApiV1EnvIDAsAuthorizePostRequest {
	r.clientId = &clientId
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) RedirectUri(redirectUri string) ApiV1EnvIDAsAuthorizePostRequest {
	r.redirectUri = &redirectUri
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) Scope(scope string) ApiV1EnvIDAsAuthorizePostRequest {
	r.scope = &scope
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) Nonce(nonce int32) ApiV1EnvIDAsAuthorizePostRequest {
	r.nonce = &nonce
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) State(state string) ApiV1EnvIDAsAuthorizePostRequest {
	r.state = &state
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) Prompt(prompt string) ApiV1EnvIDAsAuthorizePostRequest {
	r.prompt = &prompt
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) MaxAge(maxAge int32) ApiV1EnvIDAsAuthorizePostRequest {
	r.maxAge = &maxAge
	return r
}
func (r ApiV1EnvIDAsAuthorizePostRequest) AcrValues(acrValues string) ApiV1EnvIDAsAuthorizePostRequest {
	r.acrValues = &acrValues
	return r
}

func (r ApiV1EnvIDAsAuthorizePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsAuthorizePostExecute(r)
}

/*
 * V1EnvIDAsAuthorizePost Authorize (implicit)
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsAuthorizePostRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsAuthorizePost(ctx _context.Context, envID string) ApiV1EnvIDAsAuthorizePostRequest {
	return ApiV1EnvIDAsAuthorizePostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsAuthorizePostExecute(r ApiV1EnvIDAsAuthorizePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsAuthorizePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/authorize"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.responseType != nil {
		localVarFormParams.Add("response_type", parameterToString(*r.responseType, ""))
	}
	if r.clientId != nil {
		localVarFormParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	if r.redirectUri != nil {
		localVarFormParams.Add("redirect_uri", parameterToString(*r.redirectUri, ""))
	}
	if r.scope != nil {
		localVarFormParams.Add("scope", parameterToString(*r.scope, ""))
	}
	if r.nonce != nil {
		localVarFormParams.Add("nonce", parameterToString(*r.nonce, ""))
	}
	if r.state != nil {
		localVarFormParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.prompt != nil {
		localVarFormParams.Add("prompt", parameterToString(*r.prompt, ""))
	}
	if r.maxAge != nil {
		localVarFormParams.Add("max_age", parameterToString(*r.maxAge, ""))
	}
	if r.acrValues != nil {
		localVarFormParams.Add("acr_values", parameterToString(*r.acrValues, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsIntrospectPostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
	contentType *string
	token *string
	clientId *string
	clientSecret *string
}

func (r ApiV1EnvIDAsIntrospectPostRequest) ContentType(contentType string) ApiV1EnvIDAsIntrospectPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvIDAsIntrospectPostRequest) Token(token string) ApiV1EnvIDAsIntrospectPostRequest {
	r.token = &token
	return r
}
func (r ApiV1EnvIDAsIntrospectPostRequest) ClientId(clientId string) ApiV1EnvIDAsIntrospectPostRequest {
	r.clientId = &clientId
	return r
}
func (r ApiV1EnvIDAsIntrospectPostRequest) ClientSecret(clientSecret string) ApiV1EnvIDAsIntrospectPostRequest {
	r.clientSecret = &clientSecret
	return r
}

func (r ApiV1EnvIDAsIntrospectPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsIntrospectPostExecute(r)
}

/*
 * V1EnvIDAsIntrospectPost Token Introspection (Refresh Token)
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsIntrospectPostRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsIntrospectPost(ctx _context.Context, envID string) ApiV1EnvIDAsIntrospectPostRequest {
	return ApiV1EnvIDAsIntrospectPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsIntrospectPostExecute(r ApiV1EnvIDAsIntrospectPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsIntrospectPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/introspect"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.clientId != nil {
		localVarFormParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	if r.clientSecret != nil {
		localVarFormParams.Add("client_secret", parameterToString(*r.clientSecret, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsJwksGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
}


func (r ApiV1EnvIDAsJwksGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsJwksGetExecute(r)
}

/*
 * V1EnvIDAsJwksGet READ JWKS
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsJwksGetRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsJwksGet(ctx _context.Context, envID string) ApiV1EnvIDAsJwksGetRequest {
	return ApiV1EnvIDAsJwksGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsJwksGetExecute(r ApiV1EnvIDAsJwksGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsJwksGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/jwks"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsResumeGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
	cookie *string
	flowId *string
}

func (r ApiV1EnvIDAsResumeGetRequest) Cookie(cookie string) ApiV1EnvIDAsResumeGetRequest {
	r.cookie = &cookie
	return r
}
func (r ApiV1EnvIDAsResumeGetRequest) FlowId(flowId string) ApiV1EnvIDAsResumeGetRequest {
	r.flowId = &flowId
	return r
}

func (r ApiV1EnvIDAsResumeGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsResumeGetExecute(r)
}

/*
 * V1EnvIDAsResumeGet Resume
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsResumeGetRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsResumeGet(ctx _context.Context, envID string) ApiV1EnvIDAsResumeGetRequest {
	return ApiV1EnvIDAsResumeGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsResumeGetExecute(r ApiV1EnvIDAsResumeGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsResumeGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/resume"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.flowId != nil {
		localVarQueryParams.Add("flowId", parameterToString(*r.flowId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.cookie != nil {
		localVarHeaderParams["Cookie"] = parameterToString(*r.cookie, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsRevokePostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
	contentType *string
	token *string
}

func (r ApiV1EnvIDAsRevokePostRequest) ContentType(contentType string) ApiV1EnvIDAsRevokePostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvIDAsRevokePostRequest) Token(token string) ApiV1EnvIDAsRevokePostRequest {
	r.token = &token
	return r
}

func (r ApiV1EnvIDAsRevokePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsRevokePostExecute(r)
}

/*
 * V1EnvIDAsRevokePost Token Revocation
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsRevokePostRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsRevokePost(ctx _context.Context, envID string) ApiV1EnvIDAsRevokePostRequest {
	return ApiV1EnvIDAsRevokePostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsRevokePostExecute(r ApiV1EnvIDAsRevokePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsRevokePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/revoke"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsSignoffGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
	cookie *string
	idTokenHint *string
}

func (r ApiV1EnvIDAsSignoffGetRequest) Cookie(cookie string) ApiV1EnvIDAsSignoffGetRequest {
	r.cookie = &cookie
	return r
}
func (r ApiV1EnvIDAsSignoffGetRequest) IdTokenHint(idTokenHint string) ApiV1EnvIDAsSignoffGetRequest {
	r.idTokenHint = &idTokenHint
	return r
}

func (r ApiV1EnvIDAsSignoffGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsSignoffGetExecute(r)
}

/*
 * V1EnvIDAsSignoffGet Signoff
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsSignoffGetRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsSignoffGet(ctx _context.Context, envID string) ApiV1EnvIDAsSignoffGetRequest {
	return ApiV1EnvIDAsSignoffGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsSignoffGetExecute(r ApiV1EnvIDAsSignoffGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsSignoffGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/signoff"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.idTokenHint != nil {
		localVarQueryParams.Add("id_token_hint", parameterToString(*r.idTokenHint, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.cookie != nil {
		localVarHeaderParams["Cookie"] = parameterToString(*r.cookie, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsTokenPostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
	contentType *string
	grantType *string
	subjectTokenType *string
	subjectToken *string
}

func (r ApiV1EnvIDAsTokenPostRequest) ContentType(contentType string) ApiV1EnvIDAsTokenPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvIDAsTokenPostRequest) GrantType(grantType string) ApiV1EnvIDAsTokenPostRequest {
	r.grantType = &grantType
	return r
}
func (r ApiV1EnvIDAsTokenPostRequest) SubjectTokenType(subjectTokenType string) ApiV1EnvIDAsTokenPostRequest {
	r.subjectTokenType = &subjectTokenType
	return r
}
func (r ApiV1EnvIDAsTokenPostRequest) SubjectToken(subjectToken string) ApiV1EnvIDAsTokenPostRequest {
	r.subjectToken = &subjectToken
	return r
}

func (r ApiV1EnvIDAsTokenPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsTokenPostExecute(r)
}

/*
 * V1EnvIDAsTokenPost Token Exchange (Gateway Credential) 
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsTokenPostRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsTokenPost(ctx _context.Context, envID string) ApiV1EnvIDAsTokenPostRequest {
	return ApiV1EnvIDAsTokenPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsTokenPostExecute(r ApiV1EnvIDAsTokenPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsTokenPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/token"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.grantType != nil {
		localVarFormParams.Add("grant_type", parameterToString(*r.grantType, ""))
	}
	if r.subjectTokenType != nil {
		localVarFormParams.Add("subject_token_type", parameterToString(*r.subjectTokenType, ""))
	}
	if r.subjectToken != nil {
		localVarFormParams.Add("subject_token", parameterToString(*r.subjectToken, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsUserinfoGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
}


func (r ApiV1EnvIDAsUserinfoGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsUserinfoGetExecute(r)
}

/*
 * V1EnvIDAsUserinfoGet Userinfo
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsUserinfoGetRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsUserinfoGet(ctx _context.Context, envID string) ApiV1EnvIDAsUserinfoGetRequest {
	return ApiV1EnvIDAsUserinfoGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsUserinfoGetExecute(r ApiV1EnvIDAsUserinfoGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsUserinfoGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/userinfo"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsUserinfoPostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
}


func (r ApiV1EnvIDAsUserinfoPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsUserinfoPostExecute(r)
}

/*
 * V1EnvIDAsUserinfoPost Userinfo
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsUserinfoPostRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsUserinfoPost(ctx _context.Context, envID string) ApiV1EnvIDAsUserinfoPostRequest {
	return ApiV1EnvIDAsUserinfoPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsUserinfoPostExecute(r ApiV1EnvIDAsUserinfoPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsUserinfoPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/userinfo"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvIDAsWellKnownOpenidConfigurationGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsOpenIDConnectOAuth2ApiService
	envID string
}


func (r ApiV1EnvIDAsWellKnownOpenidConfigurationGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvIDAsWellKnownOpenidConfigurationGetExecute(r)
}

/*
 * V1EnvIDAsWellKnownOpenidConfigurationGet Discovery OpenID Configuration
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvIDAsWellKnownOpenidConfigurationGetRequest
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsWellKnownOpenidConfigurationGet(ctx _context.Context, envID string) ApiV1EnvIDAsWellKnownOpenidConfigurationGetRequest {
	return ApiV1EnvIDAsWellKnownOpenidConfigurationGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsOpenIDConnectOAuth2ApiService) V1EnvIDAsWellKnownOpenidConfigurationGetExecute(r ApiV1EnvIDAsWellKnownOpenidConfigurationGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsOpenIDConnectOAuth2ApiService.V1EnvIDAsWellKnownOpenidConfigurationGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{envID}/as/.well-known/openid-configuration"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ApplicationsApplicationSignOnPolicyAssignmentsApiService ApplicationsApplicationSignOnPolicyAssignmentsApi service
type ApplicationsApplicationSignOnPolicyAssignmentsApiService service

type ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetRequest struct {
	ctx context.Context
	ApiService *ApplicationsApplicationSignOnPolicyAssignmentsApiService
	environmentID string
	applicationID string
}

func (r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGet READ All SOP Assignments

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param applicationID
 @return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetRequest
*/
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGet(ctx context.Context, environmentID string, applicationID string) ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetRequest {
	return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		applicationID: applicationID,
	}
}

// Execute executes the request
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetExecute(r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsApplicationSignOnPolicyAssignmentsApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationID"+"}", url.PathEscape(parameterToString(r.applicationID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest struct {
	ctx context.Context
	ApiService *ApplicationsApplicationSignOnPolicyAssignmentsApiService
	environmentID string
	applicationID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostExecute(r)
}

/*
V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPost CREATE SOP Assignment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param applicationID
 @return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest
*/
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPost(ctx context.Context, environmentID string, applicationID string) ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest {
	return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		applicationID: applicationID,
	}
}

// Execute executes the request
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostExecute(r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsApplicationSignOnPolicyAssignmentsApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationID"+"}", url.PathEscape(parameterToString(r.applicationID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteRequest struct {
	ctx context.Context
	ApiService *ApplicationsApplicationSignOnPolicyAssignmentsApiService
	environmentID string
	applicationID string
	sOPAssignmentID string
}

func (r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDelete DELETE SOP Assignment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param applicationID
 @param sOPAssignmentID
 @return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteRequest
*/
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDelete(ctx context.Context, environmentID string, applicationID string, sOPAssignmentID string) ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteRequest {
	return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		applicationID: applicationID,
		sOPAssignmentID: sOPAssignmentID,
	}
}

// Execute executes the request
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteExecute(r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsApplicationSignOnPolicyAssignmentsApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments/{SOPAssignmentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationID"+"}", url.PathEscape(parameterToString(r.applicationID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SOPAssignmentID"+"}", url.PathEscape(parameterToString(r.sOPAssignmentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetRequest struct {
	ctx context.Context
	ApiService *ApplicationsApplicationSignOnPolicyAssignmentsApiService
	environmentID string
	applicationID string
	sOPAssignmentID string
}

func (r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGet READ One SOP Assignment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param applicationID
 @param sOPAssignmentID
 @return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetRequest
*/
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGet(ctx context.Context, environmentID string, applicationID string, sOPAssignmentID string) ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetRequest {
	return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		applicationID: applicationID,
		sOPAssignmentID: sOPAssignmentID,
	}
}

// Execute executes the request
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetExecute(r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsApplicationSignOnPolicyAssignmentsApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments/{SOPAssignmentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationID"+"}", url.PathEscape(parameterToString(r.applicationID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SOPAssignmentID"+"}", url.PathEscape(parameterToString(r.sOPAssignmentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest struct {
	ctx context.Context
	ApiService *ApplicationsApplicationSignOnPolicyAssignmentsApiService
	environmentID string
	applicationID string
	sOPAssignmentID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutExecute(r)
}

/*
V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPut UPDATE SOP Assignment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param applicationID
 @param sOPAssignmentID
 @return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest
*/
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPut(ctx context.Context, environmentID string, applicationID string, sOPAssignmentID string) ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest {
	return ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		applicationID: applicationID,
		sOPAssignmentID: sOPAssignmentID,
	}
}

// Execute executes the request
func (a *ApplicationsApplicationSignOnPolicyAssignmentsApiService) V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutExecute(r ApiV1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApplicationsApplicationSignOnPolicyAssignmentsApiService.V1EnvironmentsEnvironmentIDApplicationsApplicationIDSignOnPolicyAssignmentsSOPAssignmentIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments/{SOPAssignmentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationID"+"}", url.PathEscape(parameterToString(r.applicationID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SOPAssignmentID"+"}", url.PathEscape(parameterToString(r.sOPAssignmentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SignOnPoliciesSignOnPoliciesApiService SignOnPoliciesSignOnPoliciesApi service
type SignOnPoliciesSignOnPoliciesApiService service

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesGetRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPoliciesApiService
	environmentID string
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesGet READ All Sign On Policies

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesGetRequest
*/
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesGet(ctx context.Context, environmentID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesGetRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesGetExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPoliciesApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPoliciesApiService
	environmentID string
	policyID string
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDelete DELETE Sign On Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteRequest
*/
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDelete(ctx context.Context, environmentID string, policyID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPoliciesApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPoliciesApiService
	environmentID string
	policyID string
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGet READ One Sign On Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetRequest
*/
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGet(ctx context.Context, environmentID string, policyID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPoliciesApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPoliciesApiService
	environmentID string
	policyID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPut UPDATE Sign On Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @param policyID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest
*/
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPut(ctx context.Context, environmentID string, policyID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPoliciesApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPolicyIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies/{policyID}"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", url.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest struct {
	ctx context.Context
	ApiService *SignOnPoliciesSignOnPoliciesApiService
	environmentID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPostExecute(r)
}

/*
V1EnvironmentsEnvironmentIDSignOnPoliciesPost CREATE Sign On Policy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentID
 @return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest
*/
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPost(ctx context.Context, environmentID string) ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest {
	return ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest{
		ApiService: a,
		ctx: ctx,
		environmentID: environmentID,
	}
}

// Execute executes the request
func (a *SignOnPoliciesSignOnPoliciesApiService) V1EnvironmentsEnvironmentIDSignOnPoliciesPostExecute(r ApiV1EnvironmentsEnvironmentIDSignOnPoliciesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SignOnPoliciesSignOnPoliciesApiService.V1EnvironmentsEnvironmentIDSignOnPoliciesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{environmentID}/signOnPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"environmentID"+"}", url.PathEscape(parameterToString(r.environmentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ManagementAPIsLicensesApiService ManagementAPIsLicensesApi service
type ManagementAPIsLicensesApiService service

type ApiV1OrganizationsOrgIDLicensesGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsLicensesApiService
	orgID string
}

func (r ApiV1OrganizationsOrgIDLicensesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1OrganizationsOrgIDLicensesGetExecute(r)
}

/*
V1OrganizationsOrgIDLicensesGet READ All Licenses

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgID
 @return ApiV1OrganizationsOrgIDLicensesGetRequest
*/
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesGet(ctx context.Context, orgID string) ApiV1OrganizationsOrgIDLicensesGetRequest {
	return ApiV1OrganizationsOrgIDLicensesGetRequest{
		ApiService: a,
		ctx: ctx,
		orgID: orgID,
	}
}

// Execute executes the request
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesGetExecute(r ApiV1OrganizationsOrgIDLicensesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsLicensesApiService.V1OrganizationsOrgIDLicensesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/organizations/{orgID}/licenses"
	localVarPath = strings.Replace(localVarPath, "{"+"orgID"+"}", url.PathEscape(parameterToString(r.orgID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1OrganizationsOrgIDLicensesLicenseIDGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsLicensesApiService
	orgID string
	licenseID string
}

func (r ApiV1OrganizationsOrgIDLicensesLicenseIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1OrganizationsOrgIDLicensesLicenseIDGetExecute(r)
}

/*
V1OrganizationsOrgIDLicensesLicenseIDGet READ One License

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgID
 @param licenseID
 @return ApiV1OrganizationsOrgIDLicensesLicenseIDGetRequest
*/
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesLicenseIDGet(ctx context.Context, orgID string, licenseID string) ApiV1OrganizationsOrgIDLicensesLicenseIDGetRequest {
	return ApiV1OrganizationsOrgIDLicensesLicenseIDGetRequest{
		ApiService: a,
		ctx: ctx,
		orgID: orgID,
		licenseID: licenseID,
	}
}

// Execute executes the request
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesLicenseIDGetExecute(r ApiV1OrganizationsOrgIDLicensesLicenseIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsLicensesApiService.V1OrganizationsOrgIDLicensesLicenseIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/organizations/{orgID}/licenses/{licenseID}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgID"+"}", url.PathEscape(parameterToString(r.orgID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"licenseID"+"}", url.PathEscape(parameterToString(r.licenseID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1OrganizationsOrgIDLicensesLicenseIDNameGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsLicensesApiService
	orgID string
	licenseID string
}

func (r ApiV1OrganizationsOrgIDLicensesLicenseIDNameGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1OrganizationsOrgIDLicensesLicenseIDNameGetExecute(r)
}

/*
V1OrganizationsOrgIDLicensesLicenseIDNameGet READ One License Name

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgID
 @param licenseID
 @return ApiV1OrganizationsOrgIDLicensesLicenseIDNameGetRequest
*/
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesLicenseIDNameGet(ctx context.Context, orgID string, licenseID string) ApiV1OrganizationsOrgIDLicensesLicenseIDNameGetRequest {
	return ApiV1OrganizationsOrgIDLicensesLicenseIDNameGetRequest{
		ApiService: a,
		ctx: ctx,
		orgID: orgID,
		licenseID: licenseID,
	}
}

// Execute executes the request
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesLicenseIDNameGetExecute(r ApiV1OrganizationsOrgIDLicensesLicenseIDNameGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsLicensesApiService.V1OrganizationsOrgIDLicensesLicenseIDNameGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/organizations/{orgID}/licenses/{licenseID}/name"
	localVarPath = strings.Replace(localVarPath, "{"+"orgID"+"}", url.PathEscape(parameterToString(r.orgID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"licenseID"+"}", url.PathEscape(parameterToString(r.licenseID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsLicensesApiService
	orgID string
	licenseID string
	body *map[string]interface{}
}

func (r ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest) Body(body map[string]interface{}) ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest {
	r.body = &body
	return r
}

func (r ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1OrganizationsOrgIDLicensesLicenseIDNamePutExecute(r)
}

/*
V1OrganizationsOrgIDLicensesLicenseIDNamePut Update One License Name

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgID
 @param licenseID
 @return ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest
*/
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesLicenseIDNamePut(ctx context.Context, orgID string, licenseID string) ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest {
	return ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest{
		ApiService: a,
		ctx: ctx,
		orgID: orgID,
		licenseID: licenseID,
	}
}

// Execute executes the request
func (a *ManagementAPIsLicensesApiService) V1OrganizationsOrgIDLicensesLicenseIDNamePutExecute(r ApiV1OrganizationsOrgIDLicensesLicenseIDNamePutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsLicensesApiService.V1OrganizationsOrgIDLicensesLicenseIDNamePut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/organizations/{orgID}/licenses/{licenseID}/name"
	localVarPath = strings.Replace(localVarPath, "{"+"orgID"+"}", url.PathEscape(parameterToString(r.orgID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"licenseID"+"}", url.PathEscape(parameterToString(r.licenseID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService ManagementAPIsSignOnPoliciesSignOnPolicyActionsApi service
type ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService service

type ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService
	policyID string
	body *map[string]interface{}
}

func (r ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest) Body(body map[string]interface{}) ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostExecute(r)
}

/*
V1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost CREATE Sign-On Policy Action (AGREEMENT)

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param policyID
 @return ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest
*/
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost(ctx _context.Context, policyID string) ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest {
	return ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest{
		ApiService: a,
		ctx: ctx,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostExecute(r ApiV1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService.V1Environments9ad15e9e3ac643f7A053D46b87d6c4a7SignOnPoliciesPolicyIDActionsPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/9ad15e9e-3ac6-43f7-a053-d46b87d6c4a7/signOnPolicies/{policyID}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", _neturl.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService
	envID string
	policyID string
	actionID string
}


func (r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete DELETE Sign-On Policy Action

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param policyID
 @param actionID
 @return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest
*/
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete(ctx _context.Context, envID string, policyID string, actionID string) ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		policyID: policyID,
		actionID: actionID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteExecute(r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/signOnPolicies/{policyID}/actions/{actionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", _neturl.PathEscape(parameterToString(r.policyID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actionID"+"}", _neturl.PathEscape(parameterToString(r.actionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService
	envID string
	policyID string
	actionID string
}


func (r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet READ One Sign-On Policy Action

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param policyID
 @param actionID
 @return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetRequest
*/
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet(ctx _context.Context, envID string, policyID string, actionID string) ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetRequest {
	return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		policyID: policyID,
		actionID: actionID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetExecute(r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/signOnPolicies/{policyID}/actions/{actionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", _neturl.PathEscape(parameterToString(r.policyID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actionID"+"}", _neturl.PathEscape(parameterToString(r.actionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService
	envID string
	policyID string
	actionID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutExecute(r)
}

/*
V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut UPDATE Sign-On Policy Action

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param policyID
 @param actionID
 @return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest
*/
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut(ctx _context.Context, envID string, policyID string, actionID string) ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest {
	return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		policyID: policyID,
		actionID: actionID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutExecute(r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsActionIDPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/signOnPolicies/{policyID}/actions/{actionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", _neturl.PathEscape(parameterToString(r.policyID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"actionID"+"}", _neturl.PathEscape(parameterToString(r.actionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService
	envID string
	policyID string
}


func (r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetExecute(r)
}

/*
V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet READ All Sign-On Policy Actions

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param policyID
 @return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetRequest
*/
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet(ctx _context.Context, envID string, policyID string) ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetRequest {
	return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetExecute(r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/signOnPolicies/{policyID}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", _neturl.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService
	envID string
	policyID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostExecute(r)
}

/*
V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost CREATE Sign-On Policy Action (IDENTITY_PROVIDER)

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param policyID
 @return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest
*/
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost(ctx _context.Context, envID string, policyID string) ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest {
	return ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		policyID: policyID,
	}
}

// Execute executes the request
func (a *ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService) V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostExecute(r ApiV1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsSignOnPoliciesSignOnPolicyActionsApiService.V1EnvironmentsEnvIDSignOnPoliciesPolicyIDActionsPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/signOnPolicies/{policyID}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"policyID"+"}", _neturl.PathEscape(parameterToString(r.policyID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ManagementAPIsIdentityProviderManagementIdentityProvidersApiService ManagementAPIsIdentityProviderManagementIdentityProvidersApi service
type ManagementAPIsIdentityProviderManagementIdentityProvidersApiService service

type ApiV1EnvironmentsEnvIDIdentityProvidersGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService
	envID string
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIdentityProvidersGetExecute(r)
}

/*
V1EnvironmentsEnvIDIdentityProvidersGet READ All Identity Providers

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDIdentityProvidersGetRequest
*/
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersGet(ctx context.Context, envID string) ApiV1EnvironmentsEnvIDIdentityProvidersGetRequest {
	return ApiV1EnvironmentsEnvIDIdentityProvidersGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersGetExecute(r ApiV1EnvironmentsEnvIDIdentityProvidersGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityProviderManagementIdentityProvidersApiService.V1EnvironmentsEnvIDIdentityProvidersGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/identityProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService
	envID string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest {
	r.contentType = &contentType
	return r
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIdentityProvidersPostExecute(r)
}

/*
V1EnvironmentsEnvIDIdentityProvidersPost Discover OpenID Provider Metadata

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest
*/
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersPost(ctx context.Context, envID string) ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest {
	return ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersPostExecute(r ApiV1EnvironmentsEnvIDIdentityProvidersPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityProviderManagementIdentityProvidersApiService.V1EnvironmentsEnvIDIdentityProvidersPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/identityProviders"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService
	envID string
	providerID string
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDIdentityProvidersProviderIDDelete DELETE Identity Provider

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param providerID
 @return ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteRequest
*/
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersProviderIDDelete(ctx context.Context, envID string, providerID string) ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		providerID: providerID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteExecute(r ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityProviderManagementIdentityProvidersApiService.V1EnvironmentsEnvIDIdentityProvidersProviderIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/identityProviders/{providerID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"providerID"+"}", url.PathEscape(parameterToString(r.providerID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDGetRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService
	envID string
	providerID string
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIdentityProvidersProviderIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDIdentityProvidersProviderIDGet READ One Identity Provider

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param providerID
 @return ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDGetRequest
*/
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersProviderIDGet(ctx context.Context, envID string, providerID string) ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDGetRequest {
	return ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		providerID: providerID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersProviderIDGetExecute(r ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityProviderManagementIdentityProvidersApiService.V1EnvironmentsEnvIDIdentityProvidersProviderIDGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/identityProviders/{providerID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"providerID"+"}", url.PathEscape(parameterToString(r.providerID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest struct {
	ctx context.Context
	ApiService *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService
	envID string
	providerID string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDIdentityProvidersProviderIDPutExecute(r)
}

/*
V1EnvironmentsEnvIDIdentityProvidersProviderIDPut UPDATE Identity Provider

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param providerID
 @return ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest
*/
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersProviderIDPut(ctx context.Context, envID string, providerID string) ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest {
	return ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		providerID: providerID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityProviderManagementIdentityProvidersApiService) V1EnvironmentsEnvIDIdentityProvidersProviderIDPutExecute(r ApiV1EnvironmentsEnvIDIdentityProvidersProviderIDPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityProviderManagementIdentityProvidersApiService.V1EnvironmentsEnvIDIdentityProvidersProviderIDPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/identityProviders/{providerID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", url.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"providerID"+"}", url.PathEscape(parameterToString(r.providerID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v P1Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

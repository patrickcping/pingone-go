/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService ManagementAPIsIdentityPropagationProvisioningPropagationRulesApi service
type ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService service

type ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService
	envID string
	planID string
	accept *string
	contentType *string
}

func (r ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest) Accept(accept string) ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest {
	r.accept = &accept
	return r
}
func (r ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest {
	r.contentType = &contentType
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet READ One Plan's Rules

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param planID
 @return ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet(ctx _context.Context, envID string, planID string) ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest {
	return ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		planID: planID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetExecute(r ApiV1EnvironmentsEnvIDPropagationPlansPlanIDRulesGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService.V1EnvironmentsEnvIDPropagationPlansPlanIDRulesGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/plans/{planID}/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"planID"+"}", _neturl.PathEscape(parameterToString(r.planID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationRulesGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService
	envID string
	accept *string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesGetRequest) Accept(accept string) ApiV1EnvironmentsEnvIDPropagationRulesGetRequest {
	r.accept = &accept
	return r
}
func (r ApiV1EnvironmentsEnvIDPropagationRulesGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDPropagationRulesGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationRulesGetExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationRulesGet READ All Rules

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDPropagationRulesGetRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesGet(ctx _context.Context, envID string) ApiV1EnvironmentsEnvIDPropagationRulesGetRequest {
	return ApiV1EnvironmentsEnvIDPropagationRulesGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesGetExecute(r ApiV1EnvironmentsEnvIDPropagationRulesGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService.V1EnvironmentsEnvIDPropagationRulesGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationRulesPostRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService
	envID string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesPostRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDPropagationRulesPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDPropagationRulesPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDPropagationRulesPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationRulesPostExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationRulesPost CREATE Rule

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @return ApiV1EnvironmentsEnvIDPropagationRulesPostRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesPost(ctx _context.Context, envID string) ApiV1EnvironmentsEnvIDPropagationRulesPostRequest {
	return ApiV1EnvironmentsEnvIDPropagationRulesPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesPostExecute(r ApiV1EnvironmentsEnvIDPropagationRulesPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService.V1EnvironmentsEnvIDPropagationRulesPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/rules"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService
	envID string
	ruleID string
	accept *string
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest) Accept(accept string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest {
	r.accept = &accept
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDDeleteExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationRulesRuleIDDelete DELETE Rule

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param ruleID
 @return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDDelete(ctx _context.Context, envID string, ruleID string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		ruleID: ruleID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDDeleteExecute(r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/rules/{ruleID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ruleID"+"}", _neturl.PathEscape(parameterToString(r.ruleID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService
	envID string
	ruleID string
	accept *string
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest) Accept(accept string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest {
	r.accept = &accept
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDGetExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationRulesRuleIDGet READ One Rule

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param ruleID
 @return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDGet(ctx _context.Context, envID string, ruleID string) ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest {
	return ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		ruleID: ruleID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesRuleIDGetExecute(r ApiV1EnvironmentsEnvIDPropagationRulesRuleIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService.V1EnvironmentsEnvIDPropagationRulesRuleIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/rules/{ruleID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ruleID"+"}", _neturl.PathEscape(parameterToString(r.ruleID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.accept != nil {
		localVarHeaderParams["Accept"] = parameterToString(*r.accept, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService
	envID string
	storeID string
	contentType *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDPropagationRulesStoreIDPutExecute(r)
}

/*
V1EnvironmentsEnvIDPropagationRulesStoreIDPut UPDATE Rule

By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param envID
 @param storeID
 @return ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest
*/
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesStoreIDPut(ctx _context.Context, envID string, storeID string) ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest {
	return ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		storeID: storeID,
	}
}

// Execute executes the request
func (a *ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService) V1EnvironmentsEnvIDPropagationRulesStoreIDPutExecute(r ApiV1EnvironmentsEnvIDPropagationRulesStoreIDPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsIdentityPropagationProvisioningPropagationRulesApiService.V1EnvironmentsEnvIDPropagationRulesStoreIDPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/propagation/rules/{storeID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"storeID"+"}", _neturl.PathEscape(parameterToString(r.storeID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

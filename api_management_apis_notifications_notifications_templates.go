/*
 * PingOne Platform API
 *
 * A bare-bones collection for the PingOne API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ManagementAPIsNotificationsNotificationsTemplatesApiService ManagementAPIsNotificationsNotificationsTemplatesApi service
type ManagementAPIsNotificationsNotificationsTemplatesApiService service

type ApiV1EnvironmentsEnvIDTemplatesGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDTemplatesGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesGetExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesGet READ All Templates
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvironmentsEnvIDTemplatesGetRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesGet(ctx _context.Context, envID string) ApiV1EnvironmentsEnvIDTemplatesGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesGetExecute(r ApiV1EnvironmentsEnvIDTemplatesGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	contentID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete DELETE Content
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @param contentID
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete(ctx _context.Context, envID string, templateName string, contentID string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
		contentID: contentID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentID"+"}", _neturl.PathEscape(parameterToString(r.contentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	contentID string
	contentType *string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet READ One Content
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @param contentID
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet(ctx _context.Context, envID string, templateName string, contentID string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
		contentID: contentID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentID"+"}", _neturl.PathEscape(parameterToString(r.contentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	contentID string
	contentType *string
	authorization *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest {
	r.authorization = &authorization
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut UPDATE Push Content
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @param contentID
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut(ctx _context.Context, envID string, templateName string, contentID string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
		contentID: contentID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsContentIDPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents/{contentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentID"+"}", _neturl.PathEscape(parameterToString(r.contentID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	authorization *string
	filter *string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest {
	r.authorization = &authorization
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest) Filter(filter string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest {
	r.filter = &filter
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete DELETE Bulk Variant Contents
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete(ctx _context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsGetExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameContentsGet READ All Contents
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsGet(ctx _context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsGetExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	authorization *string
	filter *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest {
	r.authorization = &authorization
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) Filter(filter string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest {
	r.filter = &filter
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch PATCH Bulk Variant Contents
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch(ctx _context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPatchRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPatch")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	contentType *string
	authorization *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) ContentType(contentType string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest {
	r.authorization = &authorization
	return r
}
func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPostExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameContentsPost CREATE Push Content
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPost(ctx _context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameContentsPostExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameContentsPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameContentsPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}/contents"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsNotificationsNotificationsTemplatesApiService
	envID string
	templateName string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDTemplatesTemplateNameGetExecute(r)
}

/*
 * V1EnvironmentsEnvIDTemplatesTemplateNameGet READ One Template
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param templateName
 * @return ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameGet(ctx _context.Context, envID string, templateName string) ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest {
	return ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		templateName: templateName,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsNotificationsNotificationsTemplatesApiService) V1EnvironmentsEnvIDTemplatesTemplateNameGetExecute(r ApiV1EnvironmentsEnvIDTemplatesTemplateNameGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsNotificationsNotificationsTemplatesApiService.V1EnvironmentsEnvIDTemplatesTemplateNameGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/templates/{templateName}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"templateName"+"}", _neturl.PathEscape(parameterToString(r.templateName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

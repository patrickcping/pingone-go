/*
PingOne Platform API - Management

A bare-bones collection for the PingOne API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingone

import (
	"encoding/json"
)

// BillOfMaterialsProducts struct for BillOfMaterialsProducts
type BillOfMaterialsProducts struct {
	// A string that specifies the BOM ID
	Id *string `json:"id,omitempty"`
	// A string that specifies the Ping Identity product type. Options for PingOne platform products are PING_ONE_MFA, PING_ONE_RISK, PING_ONE_VERIFY, and PING_ONE_BASE. The PING_ONE_BASE product represents the default set of services that an environment can use on the PingOne platform. Options for other Ping Identity products are PING_FEDERATE, PING_ACCESS, PING_DIRECTORY, PING_DATA_SYNC, PING_DATA_GOVERNANCE, PING_ONE_FOR_ENTERPRISE, PING_ID, PING_ID_SDK, PING_INTELLIGENCE, and PING_CENTRAL
	Type *string `json:"type,omitempty"`
	// A string that specifies the description of the product or standalone service
	Description *string `json:"description,omitempty"`
	// Optional array of custom bookmarks. Maximum of five bookmarks per product.
	Bookmarks *[]BillOfMaterialsBookmarks `json:"bookmarks,omitempty"`
}

// NewBillOfMaterialsProducts instantiates a new BillOfMaterialsProducts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillOfMaterialsProducts() *BillOfMaterialsProducts {
	this := BillOfMaterialsProducts{}
	return &this
}

// NewBillOfMaterialsProductsWithDefaults instantiates a new BillOfMaterialsProducts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillOfMaterialsProductsWithDefaults() *BillOfMaterialsProducts {
	this := BillOfMaterialsProducts{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BillOfMaterialsProducts) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillOfMaterialsProducts) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BillOfMaterialsProducts) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BillOfMaterialsProducts) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BillOfMaterialsProducts) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillOfMaterialsProducts) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BillOfMaterialsProducts) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BillOfMaterialsProducts) SetType(v string) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BillOfMaterialsProducts) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillOfMaterialsProducts) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BillOfMaterialsProducts) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BillOfMaterialsProducts) SetDescription(v string) {
	o.Description = &v
}

// GetBookmarks returns the Bookmarks field value if set, zero value otherwise.
func (o *BillOfMaterialsProducts) GetBookmarks() []BillOfMaterialsBookmarks {
	if o == nil || o.Bookmarks == nil {
		var ret []BillOfMaterialsBookmarks
		return ret
	}
	return *o.Bookmarks
}

// GetBookmarksOk returns a tuple with the Bookmarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillOfMaterialsProducts) GetBookmarksOk() (*[]BillOfMaterialsBookmarks, bool) {
	if o == nil || o.Bookmarks == nil {
		return nil, false
	}
	return o.Bookmarks, true
}

// HasBookmarks returns a boolean if a field has been set.
func (o *BillOfMaterialsProducts) HasBookmarks() bool {
	if o != nil && o.Bookmarks != nil {
		return true
	}

	return false
}

// SetBookmarks gets a reference to the given []BillOfMaterialsBookmarks and assigns it to the Bookmarks field.
func (o *BillOfMaterialsProducts) SetBookmarks(v []BillOfMaterialsBookmarks) {
	o.Bookmarks = &v
}

func (o BillOfMaterialsProducts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Bookmarks != nil {
		toSerialize["bookmarks"] = o.Bookmarks
	}
	return json.Marshal(toSerialize)
}

type NullableBillOfMaterialsProducts struct {
	value *BillOfMaterialsProducts
	isSet bool
}

func (v NullableBillOfMaterialsProducts) Get() *BillOfMaterialsProducts {
	return v.value
}

func (v *NullableBillOfMaterialsProducts) Set(val *BillOfMaterialsProducts) {
	v.value = val
	v.isSet = true
}

func (v NullableBillOfMaterialsProducts) IsSet() bool {
	return v.isSet
}

func (v *NullableBillOfMaterialsProducts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillOfMaterialsProducts(val *BillOfMaterialsProducts) *NullableBillOfMaterialsProducts {
	return &NullableBillOfMaterialsProducts{value: val, isSet: true}
}

func (v NullableBillOfMaterialsProducts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillOfMaterialsProducts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



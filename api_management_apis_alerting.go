/*
 * PingOne Platform API
 *
 * A bare-bones collection for the PingOne API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ManagementAPIsAlertingApiService ManagementAPIsAlertingApi service
type ManagementAPIsAlertingApiService service

type ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsAlertingApiService
	envID string
	alertChannelID string
	authorization *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest {
	r.authorization = &authorization
	return r
}
func (r ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutExecute(r)
}

/*
 * V1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut UPDATE Alert Channel
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param alertChannelID
 * @return ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut(ctx _context.Context, envID string, alertChannelID string) ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest {
	return ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		alertChannelID: alertChannelID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutExecute(r ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelIDPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsAlertingApiService.V1EnvironmentsEnvIDAlertChannelsAlertChannelIDPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/alertChannels/{alertChannelID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alertChannelID"+"}", _neturl.PathEscape(parameterToString(r.alertChannelID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsAlertingApiService
	envID string
	alertChannelsID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteExecute(r)
}

/*
 * V1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete DELETE Alert Channel
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param alertChannelsID
 * @return ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete(ctx _context.Context, envID string, alertChannelsID string) ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest {
	return ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		alertChannelsID: alertChannelsID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteExecute(r ApiV1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsAlertingApiService.V1EnvironmentsEnvIDAlertChannelsAlertChannelsIDDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/alertChannels/{alertChannelsID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alertChannelsID"+"}", _neturl.PathEscape(parameterToString(r.alertChannelsID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDAlertChannelsGetRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsAlertingApiService
	envID string
	authorization *string
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsGetRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDAlertChannelsGetRequest {
	r.authorization = &authorization
	return r
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDAlertChannelsGetExecute(r)
}

/*
 * V1EnvironmentsEnvIDAlertChannelsGet READ All Alert Channels per Environment
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvironmentsEnvIDAlertChannelsGetRequest
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsGet(ctx _context.Context, envID string) ApiV1EnvironmentsEnvIDAlertChannelsGetRequest {
	return ApiV1EnvironmentsEnvIDAlertChannelsGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsGetExecute(r ApiV1EnvironmentsEnvIDAlertChannelsGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsAlertingApiService.V1EnvironmentsEnvIDAlertChannelsGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/alertChannels"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV1EnvironmentsEnvIDAlertChannelsPostRequest struct {
	ctx _context.Context
	ApiService *ManagementAPIsAlertingApiService
	envID string
	authorization *string
	body *map[string]interface{}
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsPostRequest) Authorization(authorization string) ApiV1EnvironmentsEnvIDAlertChannelsPostRequest {
	r.authorization = &authorization
	return r
}
func (r ApiV1EnvironmentsEnvIDAlertChannelsPostRequest) Body(body map[string]interface{}) ApiV1EnvironmentsEnvIDAlertChannelsPostRequest {
	r.body = &body
	return r
}

func (r ApiV1EnvironmentsEnvIDAlertChannelsPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.V1EnvironmentsEnvIDAlertChannelsPostExecute(r)
}

/*
 * V1EnvironmentsEnvIDAlertChannelsPost CREATE Alert Channel (Email)
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiV1EnvironmentsEnvIDAlertChannelsPostRequest
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsPost(ctx _context.Context, envID string) ApiV1EnvironmentsEnvIDAlertChannelsPostRequest {
	return ApiV1EnvironmentsEnvIDAlertChannelsPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *ManagementAPIsAlertingApiService) V1EnvironmentsEnvIDAlertChannelsPostExecute(r ApiV1EnvironmentsEnvIDAlertChannelsPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementAPIsAlertingApiService.V1EnvironmentsEnvIDAlertChannelsPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/environments/{envID}/alertChannels"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

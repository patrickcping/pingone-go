/*
 * PingOne Platform API
 *
 * A bare-bones collection for the PingOne API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AuthenticationAPIsSAML20ApiService AuthenticationAPIsSAML20Api service
type AuthenticationAPIsSAML20ApiService service

type ApiEnvIDSaml20IdpSloGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	sAMLRequest *string
	relayState *string
}

func (r ApiEnvIDSaml20IdpSloGetRequest) SAMLRequest(sAMLRequest string) ApiEnvIDSaml20IdpSloGetRequest {
	r.sAMLRequest = &sAMLRequest
	return r
}
func (r ApiEnvIDSaml20IdpSloGetRequest) RelayState(relayState string) ApiEnvIDSaml20IdpSloGetRequest {
	r.relayState = &relayState
	return r
}

func (r ApiEnvIDSaml20IdpSloGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20IdpSloGetExecute(r)
}

/*
 * EnvIDSaml20IdpSloGet SAML SLO Using GET
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiEnvIDSaml20IdpSloGetRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSloGet(ctx _context.Context, envID string) ApiEnvIDSaml20IdpSloGetRequest {
	return ApiEnvIDSaml20IdpSloGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSloGetExecute(r ApiEnvIDSaml20IdpSloGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20IdpSloGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/idp/slo"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sAMLRequest != nil {
		localVarQueryParams.Add("SAMLRequest", parameterToString(*r.sAMLRequest, ""))
	}
	if r.relayState != nil {
		localVarQueryParams.Add("RelayState", parameterToString(*r.relayState, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20IdpSloPostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	contentType *string
	sAMLRequest *string
	relayState *string
}

func (r ApiEnvIDSaml20IdpSloPostRequest) ContentType(contentType string) ApiEnvIDSaml20IdpSloPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiEnvIDSaml20IdpSloPostRequest) SAMLRequest(sAMLRequest string) ApiEnvIDSaml20IdpSloPostRequest {
	r.sAMLRequest = &sAMLRequest
	return r
}
func (r ApiEnvIDSaml20IdpSloPostRequest) RelayState(relayState string) ApiEnvIDSaml20IdpSloPostRequest {
	r.relayState = &relayState
	return r
}

func (r ApiEnvIDSaml20IdpSloPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20IdpSloPostExecute(r)
}

/*
 * EnvIDSaml20IdpSloPost SAML SLO Using POST
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiEnvIDSaml20IdpSloPostRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSloPost(ctx _context.Context, envID string) ApiEnvIDSaml20IdpSloPostRequest {
	return ApiEnvIDSaml20IdpSloPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSloPostExecute(r ApiEnvIDSaml20IdpSloPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20IdpSloPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/idp/slo"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.sAMLRequest != nil {
		localVarFormParams.Add("SAMLRequest", parameterToString(*r.sAMLRequest, ""))
	}
	if r.relayState != nil {
		localVarFormParams.Add("RelayState", parameterToString(*r.relayState, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20IdpSsoGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	sAMLRequest *string
	relayState *string
}

func (r ApiEnvIDSaml20IdpSsoGetRequest) SAMLRequest(sAMLRequest string) ApiEnvIDSaml20IdpSsoGetRequest {
	r.sAMLRequest = &sAMLRequest
	return r
}
func (r ApiEnvIDSaml20IdpSsoGetRequest) RelayState(relayState string) ApiEnvIDSaml20IdpSsoGetRequest {
	r.relayState = &relayState
	return r
}

func (r ApiEnvIDSaml20IdpSsoGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20IdpSsoGetExecute(r)
}

/*
 * EnvIDSaml20IdpSsoGet SAML SSO Using GET
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiEnvIDSaml20IdpSsoGetRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSsoGet(ctx _context.Context, envID string) ApiEnvIDSaml20IdpSsoGetRequest {
	return ApiEnvIDSaml20IdpSsoGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSsoGetExecute(r ApiEnvIDSaml20IdpSsoGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20IdpSsoGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/idp/sso"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.sAMLRequest != nil {
		localVarQueryParams.Add("SAMLRequest", parameterToString(*r.sAMLRequest, ""))
	}
	if r.relayState != nil {
		localVarQueryParams.Add("RelayState", parameterToString(*r.relayState, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20IdpSsoPostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	contentType *string
	sAMLRequest *string
	relayState *string
}

func (r ApiEnvIDSaml20IdpSsoPostRequest) ContentType(contentType string) ApiEnvIDSaml20IdpSsoPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiEnvIDSaml20IdpSsoPostRequest) SAMLRequest(sAMLRequest string) ApiEnvIDSaml20IdpSsoPostRequest {
	r.sAMLRequest = &sAMLRequest
	return r
}
func (r ApiEnvIDSaml20IdpSsoPostRequest) RelayState(relayState string) ApiEnvIDSaml20IdpSsoPostRequest {
	r.relayState = &relayState
	return r
}

func (r ApiEnvIDSaml20IdpSsoPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20IdpSsoPostExecute(r)
}

/*
 * EnvIDSaml20IdpSsoPost SAML SSO Using POST
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiEnvIDSaml20IdpSsoPostRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSsoPost(ctx _context.Context, envID string) ApiEnvIDSaml20IdpSsoPostRequest {
	return ApiEnvIDSaml20IdpSsoPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpSsoPostExecute(r ApiEnvIDSaml20IdpSsoPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20IdpSsoPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/idp/sso"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.sAMLRequest != nil {
		localVarFormParams.Add("SAMLRequest", parameterToString(*r.sAMLRequest, ""))
	}
	if r.relayState != nil {
		localVarFormParams.Add("RelayState", parameterToString(*r.relayState, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20IdpStartssoGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	contentType *string
	spEntityId *string
	applicationUrl *string
}

func (r ApiEnvIDSaml20IdpStartssoGetRequest) ContentType(contentType string) ApiEnvIDSaml20IdpStartssoGetRequest {
	r.contentType = &contentType
	return r
}
func (r ApiEnvIDSaml20IdpStartssoGetRequest) SpEntityId(spEntityId string) ApiEnvIDSaml20IdpStartssoGetRequest {
	r.spEntityId = &spEntityId
	return r
}
func (r ApiEnvIDSaml20IdpStartssoGetRequest) ApplicationUrl(applicationUrl string) ApiEnvIDSaml20IdpStartssoGetRequest {
	r.applicationUrl = &applicationUrl
	return r
}

func (r ApiEnvIDSaml20IdpStartssoGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20IdpStartssoGetExecute(r)
}

/*
 * EnvIDSaml20IdpStartssoGet Identity Provider Initiated SSO
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiEnvIDSaml20IdpStartssoGetRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpStartssoGet(ctx _context.Context, envID string) ApiEnvIDSaml20IdpStartssoGetRequest {
	return ApiEnvIDSaml20IdpStartssoGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20IdpStartssoGetExecute(r ApiEnvIDSaml20IdpStartssoGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20IdpStartssoGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/idp/startsso"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.spEntityId != nil {
		localVarQueryParams.Add("spEntityId", parameterToString(*r.spEntityId, ""))
	}
	if r.applicationUrl != nil {
		localVarQueryParams.Add("applicationUrl", parameterToString(*r.applicationUrl, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20MetadataAppIDGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	appID string
}


func (r ApiEnvIDSaml20MetadataAppIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20MetadataAppIDGetExecute(r)
}

/*
 * EnvIDSaml20MetadataAppIDGet READ SAML Metadata
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param appID
 * @return ApiEnvIDSaml20MetadataAppIDGetRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20MetadataAppIDGet(ctx _context.Context, envID string, appID string) ApiEnvIDSaml20MetadataAppIDGetRequest {
	return ApiEnvIDSaml20MetadataAppIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		appID: appID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20MetadataAppIDGetExecute(r ApiEnvIDSaml20MetadataAppIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20MetadataAppIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/metadata/{appID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appID"+"}", _neturl.PathEscape(parameterToString(r.appID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20SpAcsPostRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	contentType *string
	relayState *string
}

func (r ApiEnvIDSaml20SpAcsPostRequest) ContentType(contentType string) ApiEnvIDSaml20SpAcsPostRequest {
	r.contentType = &contentType
	return r
}
func (r ApiEnvIDSaml20SpAcsPostRequest) RelayState(relayState string) ApiEnvIDSaml20SpAcsPostRequest {
	r.relayState = &relayState
	return r
}

func (r ApiEnvIDSaml20SpAcsPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20SpAcsPostExecute(r)
}

/*
 * EnvIDSaml20SpAcsPost SAML ACS Endpoint for Identity Provider Initiated Inbound SSO
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiEnvIDSaml20SpAcsPostRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20SpAcsPost(ctx _context.Context, envID string) ApiEnvIDSaml20SpAcsPostRequest {
	return ApiEnvIDSaml20SpAcsPostRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20SpAcsPostExecute(r ApiEnvIDSaml20SpAcsPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20SpAcsPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/sp/acs"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	if r.relayState != nil {
		localVarFormParams.Add("RelayState", parameterToString(*r.relayState, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20SpMetadataIdpIDGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	idpID string
}


func (r ApiEnvIDSaml20SpMetadataIdpIDGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20SpMetadataIdpIDGetExecute(r)
}

/*
 * EnvIDSaml20SpMetadataIdpIDGet READ SAML Service Provider Metadata
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @param idpID
 * @return ApiEnvIDSaml20SpMetadataIdpIDGetRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20SpMetadataIdpIDGet(ctx _context.Context, envID string, idpID string) ApiEnvIDSaml20SpMetadataIdpIDGetRequest {
	return ApiEnvIDSaml20SpMetadataIdpIDGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
		idpID: idpID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20SpMetadataIdpIDGetExecute(r ApiEnvIDSaml20SpMetadataIdpIDGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20SpMetadataIdpIDGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/sp/metadata/{idpID}"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"idpID"+"}", _neturl.PathEscape(parameterToString(r.idpID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnvIDSaml20SpSsoGetRequest struct {
	ctx _context.Context
	ApiService *AuthenticationAPIsSAML20ApiService
	envID string
	idpId *string
	flowId *string
}

func (r ApiEnvIDSaml20SpSsoGetRequest) IdpId(idpId string) ApiEnvIDSaml20SpSsoGetRequest {
	r.idpId = &idpId
	return r
}
func (r ApiEnvIDSaml20SpSsoGetRequest) FlowId(flowId string) ApiEnvIDSaml20SpSsoGetRequest {
	r.flowId = &flowId
	return r
}

func (r ApiEnvIDSaml20SpSsoGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.EnvIDSaml20SpSsoGetExecute(r)
}

/*
 * EnvIDSaml20SpSsoGet Service Provider Initiated Inbound SSO
 * By design, PingOne requests solely comprise this collection. For complete documentation, direct a browser to <a href='https://apidocs.pingidentity.com/pingone/platform/v1/api/'>apidocs.pingidentity.com</a>.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envID
 * @return ApiEnvIDSaml20SpSsoGetRequest
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20SpSsoGet(ctx _context.Context, envID string) ApiEnvIDSaml20SpSsoGetRequest {
	return ApiEnvIDSaml20SpSsoGetRequest{
		ApiService: a,
		ctx: ctx,
		envID: envID,
	}
}

/*
 * Execute executes the request
 */
func (a *AuthenticationAPIsSAML20ApiService) EnvIDSaml20SpSsoGetExecute(r ApiEnvIDSaml20SpSsoGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIsSAML20ApiService.EnvIDSaml20SpSsoGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/{envID}/saml20/sp/sso"
	localVarPath = strings.Replace(localVarPath, "{"+"envID"+"}", _neturl.PathEscape(parameterToString(r.envID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.idpId != nil {
		localVarQueryParams.Add("idpId", parameterToString(*r.idpId, ""))
	}
	if r.flowId != nil {
		localVarQueryParams.Add("flowId", parameterToString(*r.flowId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
